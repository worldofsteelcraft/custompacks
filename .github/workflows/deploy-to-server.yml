name: Deploy To SMP Server
'on':
  push:
    branches:
      - main
    paths:
       - "world_resource_packs.json"
       - "resource_packs/**"
  workflow_dispatch:
jobs:
  sftp:
    name: "Deploy to SMP Server"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: "Setup dependencies"
        run: |
          sudo apt install lftp
      - name: "Copy Manifest"
        run: |
      - name: "Deploy changes"
        uses: milanmk/actions-file-deployer@master
        with:
          remote-protocol: "sftp"
          remote-host: ${{ secrets.SFTP_HOSTNAME }}
          remote-port: ${{ secrets.SFTP_HOSTPORT }}
          remote-user: ${{ secrets.SFTP_USERNAME }}
          remote-password: ${{ secrets.SFTP_PASSWORD }}
          # ssh-private-key: ${{ secrets.SFTP_SSHKEY }}
          remote-path: ${{ secrets.SFTP_REMOTELOC }}
          sync: delta
          # Exclude the file, as this will be processed by the next job
          sync-delta-excludes: ':(exclude)world_resource_packs.json'
      - name: Update server manifest
        run: |
          # SFTP Details for world manifest download
          SFTP_USERNAME=${{ secrets.SFTP_USERNAME }}
          SFTP_PASSWORD=${{ secrets.SFTP_PASSWORD }}
          SFTP_REMOTEPATH=${{ secrets.SFTP_REMOTELOC }}
          SFTP_SERVERADDRESS=${{ secrets.SFTP_HOSTNAME }}
          SFTP_SERVERPORT=${{ secrets.SFTP_HOSTPORT }}

          FILE_SERVERMANIFESTBASE=world_resource_packs.json
          FILE_SERVERMANIFESTPROCESS=world_resource_packs-server.json
          FILE_CUSTOMPACKSMANIFESTBASE=world_resource_packs.json
          FILE_CUSTOMPACKSMANIFESTPROCESS=world_resource_packs-custompacks.json
          FILE_MERGEDMANIFESTPROCESSOUT=world_resource_packs-merged.json

          # Fetch the server's pack details, then back it up.
          lftp -u $SFTP_USERNAME,$SFTP_PASSWORD -e "get -e $SFTP_REMOTEPATH/$FILE_SERVERMANIFESTBASE -o ./$FILE_SERVERMANIFESTPROCESS; put -e ./$FILE_SERVERMANIFESTPROCESS -o $SFTP_REMOTEPATH/world_resource_packs-manifestbackup.json; exit" sftp://$SFTP_SERVERADDRESS:$SFTP_SERVERPORT
          # Move the custom pack manifest
          mv "./$FILE_CUSTOMPACKSMANIFESTBASE" "./$FILE_CUSTOMPACKSMANIFESTPROCESS"

          # Merge the 2 packs
          # Generated by someone, I just need fast solution, don't judge me
          
          python3 -c "import json
          custompacks = json.load(open('./world_resource_packs-custompacks.json'))
          server = json.load(open('./world_resource_packs-server.json'))
          merged_data = {}
          for item in custompacks + server:
              pack_id = item['pack_id']
              if pack_id not in merged_data:
                  merged_data[pack_id] = item
          merged_list = list(merged_data.values())
          with open('world_resource_packs-merged.json', 'w') as merged_file:
              json.dump(merged_list, merged_file, indent=2)
          "
          
          # Push the manifest to server
          lftp -u $SFTP_USERNAME,$SFTP_PASSWORD -e "put ./$FILE_MERGEDMANIFESTPROCESSOUT -o "$SFTP_REMOTEPATH/$FILE_SERVERMANIFESTBASE"; exit" sftp://$SFTP_SERVERADDRESS:$SFTP_SERVERPORT





# TEMPORARILLY DISABLE DUE TO CSRF TOKEN MISMATCH ERROR
#   api:
#     name: "Restart Server"
#     needs: sftp
#     runs-on: ubuntu-latest
#     steps:
#       - name: Restart Notice
#         run: |
#           curl "https://${{ secrets.PANEL_HOSTNAME }}/api/client/servers/${{ secrets.PANEL_SERVERID }}/command" \
#           -H 'Accept: application/json' \
#           -H 'Content-Type: application/json' \
#           -H 'Authorization: Bearer ${{ secrets.PANEL_APIKEY }}' \
#           -X POST \
#           -b 'pterodactyl_session'='${{ secrets.API_SESSION }}' \
#           -d '{
#             "command": "say Server will restart after 1 minute to apply changes to the Custom Packs. Please go to a safe place before server shuts down. You can just join after server restarted. Sorry for inconvenience, but this will improve your experience here."
#           }' 
#         shell: bash
#       - name: Wait for 1 minute
#         run: sleep 60s
#         shell: bash
            #       - name: Restart Ser
#         run: |
#           curl "https://${{ secrets.PANEL_HOSTNAME }}/api/client/servers/${{ secrets.PANEL_SERVERID }}/power" \
#             -H 'Accept: application/json' \
#             -H 'Content-Type: application/json' \
#             -H 'Authorization: Bearer ${{ secrets.PANEL_APIKEY }}' \
#             -X POST \
#             -b 'pterodactyl_session'='${{ secrets.API_SESSION }}' \
#             -d '{
#               "signal": "restart"
#             }'
#         shell: bash
